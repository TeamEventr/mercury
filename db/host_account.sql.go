// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: host_account.sql

package db

import (
	"context"
	"time"
)

const addNewHostOtpQuery = `-- name: AddNewHostOtpQuery :one
INSERT INTO
    host_onboarding(
        username,
        company_name,
        company_email,
        registered,
        hosted_status,
        otp,
        created_at,
        expiry_at
    )
VALUES
    ($1, $2, $3, $4, $5, $6, NOW(), NOW() + INTERVAL '5 minutes')
RETURNING
    username,
    company_name,
    company_email,
    otp,
    expiry_at
`

type AddNewHostOtpQueryParams struct {
	Username     string
	CompanyName  string
	CompanyEmail string
	Registered   bool
	HostedStatus NullEnumHostedStatus
	Otp          string
}

type AddNewHostOtpQueryRow struct {
	Username     string
	CompanyName  string
	CompanyEmail string
	Otp          string
	ExpiryAt     time.Time
}

func (q *Queries) AddNewHostOtpQuery(ctx context.Context, db DBTX, arg AddNewHostOtpQueryParams) (AddNewHostOtpQueryRow, error) {
	row := db.QueryRow(ctx, addNewHostOtpQuery,
		arg.Username,
		arg.CompanyName,
		arg.CompanyEmail,
		arg.Registered,
		arg.HostedStatus,
		arg.Otp,
	)
	var i AddNewHostOtpQueryRow
	err := row.Scan(
		&i.Username,
		&i.CompanyName,
		&i.CompanyEmail,
		&i.Otp,
		&i.ExpiryAt,
	)
	return i, err
}

const invalidateHostOtpQuery = `-- name: InvalidateHostOtpQuery :one
UPDATE host_onboarding
SET
    expiry_at = NOW()
WHERE
    username = $1
    AND expiry_at > NOW()
RETURNING
    username
`

func (q *Queries) InvalidateHostOtpQuery(ctx context.Context, db DBTX, username string) (string, error) {
	row := db.QueryRow(ctx, invalidateHostOtpQuery, username)
	err := row.Scan(&username)
	return username, err
}

const verifyHostOTPAndCreateHostQuery = `-- name: VerifyHostOTPAndCreateHostQuery :one
WITH verified_host AS (
    SELECT
        username,
        company_name,
        company_email,
        registered,
        hosted_status
    FROM host_onboarding
    WHERE
        host_onboarding.company_email = $1
        AND otp = $2
        AND expiry_at >= NOW()
    )
INSERT INTO
    host(
        username,
        company_name,
        company_email,
        registered,
        hosted_status,
        account_status,
        created_at,
        updated_at
    )
SELECT(
    vh.username,
    vh.company_name,
    vh.company_email,
    vh.registered,
    vh.hosted_status,
    'active',
    NOW(),
    NOW()
) FROM verified_host AS vh
WHERE
    vh.username IS NOT NULL
RETURNING
    username
`

type VerifyHostOTPAndCreateHostQueryParams struct {
	CompanyEmail string
	Otp          string
}

func (q *Queries) VerifyHostOTPAndCreateHostQuery(ctx context.Context, db DBTX, arg VerifyHostOTPAndCreateHostQueryParams) (string, error) {
	row := db.QueryRow(ctx, verifyHostOTPAndCreateHostQuery, arg.CompanyEmail, arg.Otp)
	var username string
	err := row.Scan(&username)
	return username, err
}
