// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: copyfrom.go

package db

import (
	"context"
)

// iteratorForAddArtistsQuery implements pgx.CopyFromSource.
type iteratorForAddArtistsQuery struct {
	rows                 []AddArtistsQueryParams
	skippedFirstNextCall bool
}

func (r *iteratorForAddArtistsQuery) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForAddArtistsQuery) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].EventID,
		r.rows[0].Username,
	}, nil
}

func (r iteratorForAddArtistsQuery) Err() error {
	return nil
}

func (q *Queries) AddArtistsQuery(ctx context.Context, db DBTX, arg []AddArtistsQueryParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"event_artist"}, []string{"event_id", "username"}, &iteratorForAddArtistsQuery{rows: arg})
}

// iteratorForCreatePriceTierQuery implements pgx.CopyFromSource.
type iteratorForCreatePriceTierQuery struct {
	rows                 []CreatePriceTierQueryParams
	skippedFirstNextCall bool
}

func (r *iteratorForCreatePriceTierQuery) Next() bool {
	if len(r.rows) == 0 {
		return false
	}
	if !r.skippedFirstNextCall {
		r.skippedFirstNextCall = true
		return true
	}
	r.rows = r.rows[1:]
	return len(r.rows) > 0
}

func (r iteratorForCreatePriceTierQuery) Values() ([]interface{}, error) {
	return []interface{}{
		r.rows[0].EventID,
		r.rows[0].Name,
		r.rows[0].ValidityStart,
		r.rows[0].ValidityEnd,
		r.rows[0].Price,
		r.rows[0].SeatAvailable,
	}, nil
}

func (r iteratorForCreatePriceTierQuery) Err() error {
	return nil
}

func (q *Queries) CreatePriceTierQuery(ctx context.Context, db DBTX, arg []CreatePriceTierQueryParams) (int64, error) {
	return db.CopyFrom(ctx, []string{"price_tier"}, []string{"event_id", "name", "validity_start", "validity_end", "price", "seat_available"}, &iteratorForCreatePriceTierQuery{rows: arg})
}
