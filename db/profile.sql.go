// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: profile.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const deleteCustomerPfp = `-- name: DeleteCustomerPfp :one
UPDATE user_account
SET
    avatar = NULL
WHERE
    username = $1
    AND status = 'active'
    AND loggedin_at IS NOT NULL
RETURNING
    username,
    avatar
`

type DeleteCustomerPfpRow struct {
	Username string
	Avatar   pgtype.Text
}

func (q *Queries) DeleteCustomerPfp(ctx context.Context, db DBTX, username string) (DeleteCustomerPfpRow, error) {
	row := db.QueryRow(ctx, deleteCustomerPfp, username)
	var i DeleteCustomerPfpRow
	err := row.Scan(&i.Username, &i.Avatar)
	return i, err
}

const editMyProfileQuery = `-- name: EditMyProfileQuery :one
UPDATE user_account
SET
    first_name = COALESCE($2, first_name),
    middle_name = COALESCE($3, middle_name),
    last_name = COALESCE($4, last_name),
    gender = COALESCE($5, gender),
    dob = COALESCE($6, dob),
    city = COALESCE($7, city),
    phone_number = COALESCE($8, phone_number),
    updated_at = NOW()
WHERE
    username = $1
    AND status = 'active'
    AND loggedin_at IS NOT NULL
RETURNING
    username,
    email,
    avatar,
    first_name,
    middle_name,
    last_name,
    gender,
    dob,
    city,
    phone_number
`

type EditMyProfileQueryParams struct {
	Username    string
	FirstName   pgtype.Text
	MiddleName  pgtype.Text
	LastName    pgtype.Text
	Gender      NullEnumGenderOptions
	Dob         string
	City        pgtype.Text
	PhoneNumber pgtype.Text
}

type EditMyProfileQueryRow struct {
	Username    string
	Email       string
	Avatar      pgtype.Text
	FirstName   pgtype.Text
	MiddleName  pgtype.Text
	LastName    pgtype.Text
	Gender      NullEnumGenderOptions
	Dob         string
	City        pgtype.Text
	PhoneNumber pgtype.Text
}

func (q *Queries) EditMyProfileQuery(ctx context.Context, db DBTX, arg EditMyProfileQueryParams) (EditMyProfileQueryRow, error) {
	row := db.QueryRow(ctx, editMyProfileQuery,
		arg.Username,
		arg.FirstName,
		arg.MiddleName,
		arg.LastName,
		arg.Gender,
		arg.Dob,
		arg.City,
		arg.PhoneNumber,
	)
	var i EditMyProfileQueryRow
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.Avatar,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Gender,
		&i.Dob,
		&i.City,
		&i.PhoneNumber,
	)
	return i, err
}

const getMyProfileQuery = `-- name: GetMyProfileQuery :one
SELECT
    username,
    email,
    first_name,
    middle_name,
    last_name,
    dob,
    avatar,
    gender,
    city,
    phone_number
FROM user_account
WHERE
    username = $1
    AND status = 'active'
    AND loggedin_at IS NOT NULL
LIMIT 1
`

type GetMyProfileQueryRow struct {
	Username    string
	Email       string
	FirstName   pgtype.Text
	MiddleName  pgtype.Text
	LastName    pgtype.Text
	Dob         string
	Avatar      pgtype.Text
	Gender      NullEnumGenderOptions
	City        pgtype.Text
	PhoneNumber pgtype.Text
}

func (q *Queries) GetMyProfileQuery(ctx context.Context, db DBTX, username string) (GetMyProfileQueryRow, error) {
	row := db.QueryRow(ctx, getMyProfileQuery, username)
	var i GetMyProfileQueryRow
	err := row.Scan(
		&i.Username,
		&i.Email,
		&i.FirstName,
		&i.MiddleName,
		&i.LastName,
		&i.Dob,
		&i.Avatar,
		&i.Gender,
		&i.City,
		&i.PhoneNumber,
	)
	return i, err
}
